name: CI
on: [push, pull_request]

jobs:
  build:
    name: Build
    needs: [update-version]
    runs-on: ubuntu-latest
    steps:
      - name: Extract branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract_branch

      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ref: ${{ steps.extract_branch.outputs.branch }}

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v1
        with:
          languages: csharp

      - name: Clean
        run: dotnet clean

      - name: Restore
        run: dotnet restore

      - name: Build
        run: dotnet build --configuration Release

      - name: Pack
        if: ${{ needs.update-version.outputs.applicable == 'true' }}
        run: dotnet pack --configuration Release

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v1

      - name: Upload build artifact
        uses: actions/upload-artifact@v2
        with:
          name: build
          path: "/home/runner/work/${{ github.event.repository.name }}/${{ github.event.repository.name }}/${{ github.repository_owner }}.${{ github.event.repository.name }}/bin/Release"
          if-no-files-found: error

  test:
    name: Unit test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --configuration Release --no-restore

      - name: Test
        run: dotnet test --no-restore --no-build --configuration Release

  comment-pull-request:
    name: Create test report
    if: ${{ github.event_name == 'pull_request' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Get pull request number
        id: PRNUMBER
        uses: kkak10/pr-number-action@v1.3

      - name: Set test title
        id: TEST
        run: |
          echo "::set-output name=title::Test run for pull request #${{steps.PRNUMBER.outputs.pr}} (${{github.run_number}})"
          echo "::set-output name=file_name::${{github.workspace}}/TestReport.md"

      - name: Test
        run: dotnet test --configuration Release --logger:"liquid.md;LogFileName=${{steps.TEST.outputs.file_name}};Title=${{steps.TEST.outputs.title}};"

      - name: Create test report
        id: REPORT
        uses: juliangruber/read-file-action@v1
        with:
          path: ${{steps.TEST.outputs.file_name}}

      - name: Comment on pull request
        if: github.event_name == 'pull_request'
        uses: thollander/actions-comment-pull-request@master
        with:
          message: ${{steps.REPORT.outputs.content}}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  update-version:
    name: Update version
    if: ${{ github.event_name != 'pull_request' }}
    runs-on: ubuntu-latest
    outputs:
      label: ${{steps.VERSION.outputs.label}}
      semver: ${{steps.VERSION.outputs.semver}}
      nuget: ${{steps.VERSION.outputs.nuget}}
      applicable: ${{steps.VERSION.outputs.applicable}}
    steps:
      - name: Extract branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract_branch

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup GitVersion
        run: dotnet tool install --global GitVersion.Tool --version 5.6.0

      - name: Fetch for GitVersion
        run: git fetch --tags --unshallow

      - name: Fetch main for GitVersion
        if: github.ref != 'refs/heads/main'
        run: git branch --create-reflog main origin/main

      - name: Update version
        run: dotnet-gitversion /updateprojectfiles /updateassemblyinfo /output buildserver

      - name: Set job output
        id: VERSION
        run: |
          echo '::set-output name=label::${{env.GitVersion_PreReleaseLabel}}'
          echo '::set-output name=semver::${{env.GitVersion_LegacySemVer}}'
          echo '::set-output name=nuget::${{env.GitVersion_NuGetPreReleaseTagV2}}'
          echo '::set-output name=applicable::${{env.GitVersion_PreReleaseLabel == 'alpha' || env.GitVersion_PreReleaseLabel == 'beta' }}'

      - name: Enable branch protection bypass
        if: ${{ steps.extract_branch.outputs.branch == 'main'}}
        uses: Somfic/bypass-branch-protection@1.0.3
        id: BYPASS
        with:
          token: ${{secrets.ADMIN_TOKEN}}
          branch: ${{steps.extract_branch.outputs.branch}}

      - name: Apply changes
        if: ${{ steps.VERSION.outputs.applicable == 'true' || steps.extract_branch.outputs.branch == 'main' }}
        uses: EndBug/add-and-commit@v6.2.0
        with:
          author_name: github-actions[bot]
          author_email: github-actions[bot]@users.noreply.github.com
          message: "Bumped version to ${{env.GitVersion_LegacySemVer}}"

      - name: Disable branch protection bypass
        uses: Somfic/bypass-branch-protection@1.0.3
        if: ${{always() && steps.extract_branch.outputs.branch == 'main'}}
        with:
          token: ${{secrets.ADMIN_TOKEN}}
          branch: ${{steps.extract_branch.outputs.branch}}
          backup: ${{steps.BYPASS.outputs.backup}}

  publish-nuget:
    needs: [build, update-version, test]
    name: Publish prerelease package
    if: ${{ needs.update-version.outputs.applicable == 'true' }}
    runs-on: windows-latest
    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v2
        with:
          name: build

      - name: Authorize with Github Package Registry
        run: dotnet nuget add source https://nuget.pkg.github.com/${{ github.event.repository.name }}/index.json -n "github" -u "${{ github.repository_owner }}" -p "${{secrets.ADMIN_TOKEN}}"

      - name: Publish project to NuGet
        run: dotnet nuget push '*.nupkg' -k ${{secrets.NUGET_KEY}} -s https://api.nuget.org/v3/index.json

      - name: Publish project to Github Package Registry
        run: dotnet nuget push '*.nupkg' -s github

      - name: Unlist earlier packages of this type
        uses: darenm/unlist-nuget@v1
        with:
          NUGET_PACKAGE: "${{ github.repository_owner }}.${{ github.event.repository.name }}"
          VERSION_REGEX: ".*${{needs.update-version.outputs.label}}.*"
          NUGET_KEY: ${{secrets.NUGET_KEY}}
